<div class="form-row justify-content-center">
    <ul class="nav nav-pills mb-3 bg" id="pills-tab" role="tablist">
        <li class="nav-item">
            <a class="nav-link active" id="pills-check-tab" data-toggle="pill" href="#pills-check" role="tab" aria-controls="pills-check" aria-selected="true">CheckList</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="pills-part-tab" data-toggle="pill" href="#pills-part" role="tab" aria-controls="pills-part" aria-selected="false">Parte Diario Máquinaria</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="pills-fuel-tab" data-toggle="pill" href="#pills-fuel" role="tab" aria-controls="pills-fuel" aria-selected="false">Combustible</a>
        </li>
    </ul>
</div>
<div class="tab-content" id="pills-tabContent">
    <div class="tab-pane fade show active" id="pills-check" role="tabpanel" aria-labelledby="pills-check-tab">
        <div class="container">
            <form role="form" data-toggle="validator" id="form-list">
                <div class="form-row">
                    <div class="form-group col-md-6">
                        <label for="headquarters">Sucursales - Sedes - Fundos</label>
                        <select class="form-control selectpicker" data-live-search="true" id="headquarters" name="headquarters" disabled data-size="5" required>
                            <option data-tokens="000" value="000">---</option>
                        </select>
                        <p class="text-danger" id="error-headquarters"></p>
                    </div>
                    <div class="form-group col-md-6">
                        <label for="machinery">Maquinarias</label>
                        <select class="form-control selectpicker" data-live-search="true" id="machinery" data-size="5" disabled required ></select>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6">
                        <label for="implementType">Tipos de implemento</label>
                        <select class="form-control selectpicker" data-live-search="true" id="implementType" data-size="5" disabled required >
                            <option data-tokens="000" value="000">---</option>
                        </select>
                        <p class="text-danger" id="error-implementType"></p>
                    </div>
                    <div class="form-group col-md-6">
                        <label for="implement">Implementos</label>
                        <select class="form-control selectpicker" data-live-search="true" id="implement" data-size="5" disabled required></select>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6">
                        <label for="operator">Operarios</label>
                        <select class="form-control selectpicker" data-live-search="true" id="operator" data-size="5" disabled required></select>
                    </div>
                    <div class="form-group col-md-6">
                        <label for="turn">Turno</label>
                        <select class="form-control selectpicker" data-live-search="true" id="turn" disabled required></select>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6">
                        <label for="date">Fecha</label>
                        <input class="form-control" type="date" id="date" name="date" disabled required />
                    </div>
                    <div class="form-group col-md-6">
                        <label for="status">Estado</label>
                        <input class="form-control text-center" type="text" id="status" value="--------" name="status" disabled required />
                    </div>
                </div>

                <div>
                    <div>
                        <h5>Sistemas - Componentes</h5>
                    </div>
                    <div class="form-row table-responsive" id="table-system">

                    </div>
                </div>
                <div class="form-row table-responsive">
                    <div>
                        <h5>Implementos - Componentes</h5>
                    </div>
                    <div class="form-row table-responsive" id="table-implement">

                    </div>

                </div>
                <div class="form-row justify-content-center">
                    <button type="submit" id="send-check-list" class="btn btn-success">
                        Actualizar
                    </button>
                </div>
            </form>
        </div>
    </div>
    <div class="tab-pane fade" id="pills-part" role="tabpanel" aria-labelledby="pills-part-tab">
        <div class="container">
            <div class="margin-bottom-lg">
                <h2 class="text-center ">Registrar Parte Diario Maquinaria </h2>
            </div>
            <form role="form" class="form-add-item-part-daily" data-toggle="validator" id="form-add-item-part-daily">
                <div class="form-row">
                    <div class="form-group col-md-6">
                        <label for="consumer">Consumidor</label>
                        <select class="form-control selectpicker" data-live-search="true" id="consumer" name="consumer" data-size="5" required></select>
                        <p class="text-danger" id="error-consumer"></p>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-sm-12 col-md-6">
                        <div class="form-row">
                            <div class="form-group col-sm-6 col-md-6">
                                <label for="star-date">Fecha Inicio</label>
                                <input class="form-control" type="date" name="star-date" id="star-date"  disabled required />
                            </div>
                            <div class="form-group col-sm-6 col-md-6">
                                <label for="star-time">Hora Inicio</label>
                                <input class="form-control" type="time" name="star-time" id="star-time" required />
                            </div>
                        </div>
                        <p class="text-danger" id="error-star-datetime"></p>
                    </div>
                    <div class="form-group col-sm-12 col-md-6">
                        <div class="form-row">
                            <div class="form-group col-sm-6 col-md-6">
                                <label for="end-date">Fecha Final</label>
                                <input class="form-control" type="date" name="end-date" id="end-date" required />
                            </div>
                            <div class="form-group col-sm-6 col-md-6">
                                <label for="end-time">Hora Final</label>
                                <input class="form-control" type="time" name="end-time" id="end-time" required />
                            </div>
                        </div>
                        <p class="text-danger" id="error-end-datetime"></p>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6">
                        <label for="activity">Actividad</label>
                        <select class="form-control selectpicker" data-live-search="true" id="activity" name="activity" data-size="5" required>
                            <option data-tokens="000" value="000">---</option>
                        </select>
                        <p class="text-danger" id="error-activity"></p>
                    </div>
                    <div class="form-group col-md-6">
                        <label for="work">Labor</label>
                        <select class="form-control selectpicker" data-live-search="true" id="work" name="work" data-size="5" required disabled>
                            <option data-tokens="000" value="000">---</option>
                        </select>
                        <p class="text-danger" id="error-work"></p>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-sm-6 col-md-6">
                        <label for="star-horometer">Horómetro Inicial</label>
                        <input class="form-control" type="number" step="0.01" min="0.01" value=0.00 name="star-horometer" id="star-horometer" required />
                        <p class="text-danger" id="error-star-horometer"></p>
                    </div>
                    <div class="form-group col-sm-6 col-md-6">
                        <label for="end-horometer">Horómetro Final</label>
                        <input class="form-control" type="number" step="0.01" min="0.01" value=0.00  name="end-horometer" id="end-horometer" required />
                        <p class="text-danger" id="error-end-horometer"></p>
                    </div>
                </div>
                <div class="form-row justify-content-center">
                    <button type="submit" id="add-part-daily" class="btn btn-success">
                        Agregar al listado de parte diario
                    </button>
                </div>
            </form>
            <br />
            <br />
            <div class="margin-bottom-lg">
                <h4 class="text-left ">Listado:Parte Diario Maquinaria </h4>
            </div>
            <form action="/" method="post" id="form-add-daily-part">
                <div class="form-row table-responsive">
                    <table class="table table-hover" id="table-part-daily">
                        <thead class="thead-light text-white">
                            <tr class="d-flex">
                                <th class="col-1 text-center font-weight-bold">#</th>
                                <th class="col-2 text-left font-weight-bold">Consumidor</th>
                                <th class="col-2 text-center font-weight-bold">Hora Inicio</th>
                                <th class="col-2 text-center font-weight-bold">Hora Final</th>
                                <th class="col-1 text-left font-weight-bold">Actividad</th>
                                <th class="col-1 text-left font-weight-bold">Labor</th>
                                <th class="col-1 text-center font-weight-bold">Htro. Inicial</th>
                                <th class="col-1 text-center font-weight-bold">Htro. Final</th>
                                <th class="col-1 text-center font-weight-bold">Editar</th>
                            </tr>
                        </thead>
                        <tbody id="table-part-daily-body"></tbody>
                    </table>
                </div>
                <div class="d-flex justify-content-center align-content-center flex-column">
                    <div class="d-flex justify-content-center align-content-center" id="pdm-image-list">
                        <div class="loader">

                        </div>
                    </div>
                    <p class="font-weight-bold d-block text-center" id="loader-message"> Cargando... </p>
                </div>
                <div class="form-row justify-content-center">
                    <button type="submit" class="btn btn-danger" id="add-server-part-daily">
                        Guardar parte diario del día
                    </button>
                </div>
            </form>


        </div>
    </div>
    <div class="tab-pane fade" id="pills-fuel" role="tabpanel" aria-labelledby="pills-fuel-tab">
        <div class="container">
            <div class="margin-bottom-lg">
                <h2 class="text-center "> Abastecimiento de Combustible </h2>
            </div>
            <form role="form" data-toggle="validator" id="form-add-fuel-daily-parte">
                <ul class="list-group fuel-items-save" id="fuel-items-save"></ul>
                <div class="margin-bottom-lg">
                    <h5 class="text-left "> Abastecimiento Extra </h5>
                </div>
                <ul class="list-group fuel-items" id="fuel-items">
                    <li class="form-row fuel-items-item" id="fuel-item-1">
                        <div class="form-group col-sm-6 col-md-6 fuel-items-item-fuel">
                            <label for="fuel-1">Combustible-1</label>
                            <input class="form-control" type="number" step="0.01" min="0.01" name="fuel-1" id="fuel-1" value="0.00" required />
                            <p class="text-danger" id="error-fuel-1"></p>
                        </div>
                        <div class="form-group col-sm-6 col-md-6 fuel-items-item-horometer">
                            <label for="fuel-horometer-1">Horómetro-1</label>
                            <input class="form-control" type="number" step="0.01" min="0.01" name="fuel-horometer-1" id="fuel-horometer-1" value="0.00" required />
                            <p class="text-danger" id="error-end-horometer-1"></p>
                        </div>
                    </li>
                </ul>
                <div class="d-flex justify-content-between">
                    <a href="/" class="text-left" id="remove-extra-fuel">
                        Remover combustible extra
                    </a>
                    <a href="/" class="text-right" id="extra-fuel">
                        Agregar combustible extra
                    </a>
                </div>
                <br />
                <div class="form-row justify-content-center">
                    <button type="submit" id="add-fuel" class="btn btn-success">
                        Guardar Abastecimiento
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section scripts {
<script src="~/Scripts/utils/utils.js"></script>
<script type="text/javascript">

    $(() => {
        const data = localStorage.getItem("data");
        const user = JSON.parse(data);

        if (!user) {
            let url = $("#RedirectToLogin").val(); location.href = url;
        }
        else {

        const mitigateData = localStorage.getItem("mitigate");
        const mitigate = JSON.parse(mitigateData);
        const partDailyData = localStorage.getItem("partDaily");
        const partDaily = JSON.parse(partDailyData);

        if (mitigate === false) {
            $("#send-check-list").hide();
        }
        if (partDaily === false) {
            $(`#add-part-daily`).hide();
            $(`#add-part-daily`).attr("disabled", true);
            $(`#add-server-part-daily`).hide();
            $(`#add-server-part-daily`).attr("disabled", true);
            $(`#add-fuel`).hide();
            $(`#add-fuel`).attr("disabled", true);

            $(`#star-time`).attr("disabled", true);
            $(`#end-date`).attr("disabled", true);
            $(`#end-time`).attr("disabled", true);
            $(`#activity`).attr("disabled", true);
            $(`#work`).attr("disabled", true);
            $(`#star-horometer`).attr("disabled", true);
            $(`#end-horometer`).attr("disabled", true);
        }


        //GET -> Controller:Sede/Index
        //Inicializars Sede
        var IdParteDefault = "@ViewData["IdParte"]";
        var IdSucursalDefault = "@ViewData["IdSucursal"]";
        var IdTipoImplementoDefault = "@ViewData["IdTipoImplemento"]";
        var IdImplementoDefault = "@ViewData["IdImplemento"]";
        var IdOperarioDefault = "@ViewData["IdOperario"]";
        var IdMaquinariaDefault = "@ViewData["IdMaquinaria"]";
        var IdEstado = "@ViewData["IdEstado"]";
        var FechaDefault = "@ViewData["Fecha"]";
        var IdTurnoDefault = "@ViewData["IdTurno"]";
        var checkListSistemaDefault = JSON.parse(@Html.Raw(Json.Encode(ViewData["checkSistema"])));
        var checkListImplementoDefault = JSON.parse(@Html.Raw(Json.Encode(ViewData["checkImplemento"])));
        var observacionesDefault = JSON.parse(@Html.Raw(Json.Encode(ViewData["observaciones"])));
        //Fecha Actual - change Format dd-mm-yyyy to yyyy-mm-dd
        var oldFormat = FechaDefault.split(" ")[0]
        var convert = oldFormat.split("/")
        var newFormat = convert[2] + "-" + convert[1] + "-" + convert[0] 
        //String to Date
        var now = new Date(newFormat);
        var day = ("0" + now.getDate()).slice(-2);
        var month = ("0" + (now.getMonth() + 1)).slice(-2);
        var today = now.getFullYear() + "-" + (month) + "-" + (day);
        //CheckList
        $(`#date`).val(today);
        //Daily Part
        $(`#star-date`).val(today);
        $(`#star-time`).val("00:00");
        $(`#end-date`).val(today);
        $(`#end-time`).val("00:00");
        

        //GET -> Controller:PDMEstado/Index
        //Inicializar Turno
        axios.get(`${URL}/PDMEstado/Index`, {
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            }
        })
        .then(response => {
            response.data.map(item => {
                if (item.IdEstado === IdEstado) {
                    $(`#status`).val(item.Descripcion);
                   
                    if (item.IdEstado === "02") {
                        $(`#add-part-daily`).hide();
                        $(`#add-server-part-daily`).hide();
                        $(`#add-fuel`).hide();
                    } 
                }
            })
        })
        .catch(error => {
            console.log(error);
        });

        
         //GET -> Controller:Tipo Implemento/Index
            //Inicializar Operario
        $('#operator').on('loaded.bs.select', (e) => {
            const dataOperario = JSON.stringify({
                estado: 1
            })

            axios.get(`${URL}/PDMOperario/Index`, {
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                },
                params: {
                    Estado: JSON.parse(dataOperario).estado,
                }
            })
            .then(response => {
                response.data.map((item, index) => {
                    let option;
                    if (IdOperarioDefault === item.IdOperario) {
                        option = `<option data-tokens=${item.IdPersonal} value=${item.IdOperario} selected> ${item.Nombre} </option>`;
                    }
                    else{
                        option = `<option data-tokens=${item.IdPersonal} value=${item.IdOperario}> ${item.Nombre} </option>`;
                    }
                    $("#operator").append(option)
                    $("#operator").selectpicker('refresh');
                    //$("#operator").removeAttr("disabled");
                });
            })
            .catch(error => {
                console.log(error);
            });
        });

        //GET -> Controller:PDMTurno/Index
        //Inicializar Turno - disabled
        $('#turn').on('loaded.bs.select', (e) => {
            axios.get(`${URL}/PDMTurno/Index`, {
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }
            })
            .then(response => {
                response.data.map((item, index) => {
                    let option;
                    if (IdTurnoDefault === item.IdTurno) {
                        option = `<option data-tokens=${item.IdTurno} value=${item.IdTurno} selected> ${item.Descripcion} </option>`;
                    } else {
                        option = `<option data-tokens=${item.IdTurno} value=${item.IdTurno}> ${item.Descripcion} </option>`;
                    }

                    $("#turn").append(option)
                    $("#turn").selectpicker('refresh');
                    //$("#turn").removeAttr("disabled");
                });
            })
            .catch(error => {
                console.log(error);
            });
        });

        //GET -> Controller:PDMTurno/Index
        //Inicializar Activity 
        $('#activity').on('loaded.bs.select', (e) => {
            axios.get(`${URL}/PDMActividad/Index`, {
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }
            })
            .then(response => {
                response.data.map((item, index) => {
                    let option;
                        option = `<option data-tokens=${item.IdActividad} value=${item.IdActividad}> ${item.Descripcion} </option>`;

                    $("#activity").append(option)
                    $("#activity").selectpicker('refresh');
                    //$("#activity").removeAttr("disabled");
                });
            })
            .catch(error => {
                console.log(error);
            });
        });

        //GET -> Controller:Tipo Implemento/Index
        //Inicializar Tipo Implemento - disabled
        $('#implementType').on('loaded.bs.select', (e) => {
            axios.get(`${URL}/PDMTipoImplemento/IndexJSON`, {
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }
            })
            .then(response => {
                response.data.map((item, index) => {
                    let option;
                    if (IdTipoImplementoDefault === item.IdTipoImplemento) {
                        option = `<option data-tokens=${item.IdTipoImplemento} value=${item.IdTipoImplemento} selected > ${item.Descripcion} </option>`;
                    }
                    else {
                        option = `<option data-tokens=${item.IdTipoImplemento} value=${item.IdTipoImplemento}> ${item.Descripcion} </option>`;
                    }
                    $("#implementType").append(option)
                    $("#implementType").selectpicker('refresh');
                    //$("#implementType").removeAttr("disabled");
                });
            })
            .then(response => {
                let dataImpl = JSON.stringify({
                    IdParte: IdParteDefault,
                    IdTipoImplemento: IdTipoImplementoDefault
                })
                axios.get(`${URL}/PDMCheckListImplemento/Index`, {
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                    },
                    params: {
                        IdParte: JSON.parse(dataImpl).IdParte,
                        IdTipoImplemento: JSON.parse(dataImpl).IdTipoImplemento
                    }
                })
                .then(response => {
                    let implemento = response.data[0];
                    $(`#table-implement`).empty();
                    let table =
                        `
                        <table class="table table-hover" id="system-${implemento.IdSistema}" >
                            <thead class="thead-light text-white" id="systems-head">
                                <tr class="d-flex" id="systems-head-th">
                                    <th class="col-1 text-center font-weight-bold">#</th>
                                    <th class="col-5 text-left font-weight-bold">
                                        ${implemento.Sistema}
                                    </th>
                                    <th class="col-2 text-center font-weight-bold">OK</th>
                                    <th class="col-2 text-center font-weight-bold">NO OK</th>
                                    <th class="col-2 text-center font-weight-bold">N.A.</th>
                                </tr>
                            </thead>
                        </table>`;
                    $("#table-implement").append(table);
                    //Observation
                    $("#table-implement").append(`<div class="table  d-flex justify-content-between" id="observation-${implemento.IdSistema}"/>`);
                    return response;
                })
                .then(response => {
                    let implemento = response.data[0];
                    var indice = 1;
                    var tbody = "<tbody>";
                    response.data.map((item, index) => {
                        let results = checkListImplementoDefault.filter((implemento) => { return implemento.IdComponente == item.IdComponente; });
                        let tr;
                        if (results[0].Situacion == 0) {
                            tr = `
                            <tr class="d-flex components" id="component-${item.IdComponente}">
                                <td class="col-1 text-center">${indice}</td>
                                <td class="col-5 text-left">${item.Componente}</td>
                                <td class="col-2 text-center"><input type="radio" class="text-center" checked value=0 name=${item.IdComponente} disabled></td>
                                <td class="col-2 text-center"><input type="radio" class="text-center" value=1 name=${item.IdComponente} disabled></td>
                                <td class="col-2 text-center"><input type="radio" class="text-center" value=2 name=${item.IdComponente} disabled></td>
                            </tr>
                            `;
                        }
                        else if (results[0].Situacion == 1) {
                            tr = `
                            <tr class="d-flex components" id="component-${item.IdComponente}">
                                <td class="col-1 text-center">${indice}</td>
                                <td class="col-5 text-left">${item.Componente}</td>
                                <td class="col-2 text-center"><input type="radio" class="text-center" value=0 name=${item.IdComponente} disabled></td>
                                <td class="col-2 text-center"><input type="radio" class="text-center" checked value=1 name=${item.IdComponente} disabled></td>
                                <td class="col-2 text-center"><input type="radio" class="text-center" value=2 name=${item.IdComponente} disabled></td>
                            </tr>
                            `;
                        }
                        else if (results[0].Situacion == 2) {
                            tr = `
                            <tr class="d-flex components" id="component-${item.IdComponente}">
                                <td class="col-1 text-center">${indice}</td>
                                <td class="col-5 text-left">${item.Componente}</td>
                                <td class="col-2 text-center"><input type="radio" class="text-center" value=0 name=${item.IdComponente}></td>
                                <td class="col-2 text-center"><input type="radio" class="text-center" value=1 name=${item.IdComponente} ></td>
                                <td class="col-2 text-center"><input type="radio" class="text-center" checked value=2 name=${item.IdComponente} ></td>
                            </tr>
                            `;
                        }
                        tbody = tbody + tr;
                        indice = indice + 1;
                    })
                    tbody = tbody + "</tbody>"
                    $(`#system-${implemento.IdSistema}`).append(tbody);
                    return response;
                })
                .then(response => {
                    let children = [];
                    response.data.map((parte, index) => {
                        //To Verify observations
                        if (observacionesDefault.length > 0) {
                            observacionesDefault.map((obser) => {
                                if (obser.IdSistema === parte.IdSistema) {
                                    var check = parseInt($(`input[name=${parte.IdComponente}]:checked`).val());
                                    if (check === 1) {
                                        let length = $(`#observation-${parte.IdSistema}`).children().length;
                                        if (length === 0) {
                                            //TextArea Observaciones - Aplica - Acciones
                                            let observation =
                                                `
                                                    <div class="col-md-8">
                                                        <div class="d-flex justify-content-between align-items-center">
                                                            <label for="observation-system-${obser.IdSistema}">Observaciones:</label>
                                                        </div>
                                                        <textarea class="form-control observations" rows="1" id="observation-system-${obser.IdSistema}" disabled>${obser.Observacion}</textarea>
                                                    </div>
                                                    <div class="col-md-4" id="container-action-${obser.IdSistema}">
                                                        <label for="system-action-${obser.IdSistema}">Acciones</label>

                                                    </div>
                                                `;
                                            $(`#observation-${obser.IdSistema}`).append(observation);

                                            let select;
                                            axios.get(`${URL}/PDMAccion/Index`, {
                                                headers: {
                                                    'Accept': 'application/json',
                                                    'Content-Type': 'application/json',
                                                }
                                            }).then(response => {
                                                let select;
                                                if (mitigate === true) {
                                                    select = `<select class="form-control selectpicker actionsSystem" id="system-action-${obser.IdSistema}" data-live-search="true">`;
                                                }
                                                else {
                                                    select = `<select class="form-control selectpicker actionsSystem" id="system-action-${obser.IdSistema}" data-live-search="true" disabled>`;
                                                }
                                                response.data.map((action, index) => {

                                                    let option;
                                                    if (obser.IdAccion === action.IdAccion) {
                                                        option = `<option data-tokens=${action.IdAccion} value=${action.IdAccion} selected> ${action.Descripcion} </option>`;
                                                    }
                                                    else {
                                                        option = `<option data-tokens=${action.IdAccion} value=${action.IdAccion}> ${action.Descripcion} </option>`;
                                                    }
                                                    //let option = `<option data-tokens=${item.IdAccion} value=${item.IdAccion}> ${item.Descripcion} </option>`;
                                                    select = select + option;
                                                })
                                                select = select + (`</select>`);
                                                $(`#container-action-${obser.IdSistema}`).append(select)
                                                $(`#system-action-${obser.IdSistema}`).selectpicker('refresh');
                                            })
                                            children[index] = true;
                                        }
                                        else if (check === 0 || check === 2) {
                                            children[index] = false;
                                        }
                                    }
                                }
                            })
                        }

                        $(`input[name=${parte.IdComponente}]`).change(() => {
                            var check = parseInt($(`input[name=${parte.IdComponente}]:checked`).val());
                            if (check === 1) {
                                let length = $(`#observation-${parte.IdSistema}`).children().length;
                                if (length === 0) {
                                    let observation =
                                        `
                                            <div class=" col-md-8">
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <label for="observation-system-${parte.IdSistema}">Observaciones:</label>
                                                </div>
                                                <textarea class="form-control observations" rows="1" id="observation-system-${parte.IdSistema}" required></textarea>
                                            </div>
                                            <div class="col-md-4" id="container-action-${parte.IdSistema}">
                                                <label for="system-action-${parte.IdSistema}">Acciones</label>

                                            </div>
                                        `;
                                    $(`#observation-${parte.IdSistema}`).append(observation);

                                    let select;
                                    if ($(`#system-action-${parte.IdSistema}`).children() > 0) {

                                    }
                                    else {
                                        axios.get(`${URL}/PDMAccion/Index`, {
                                            headers: {
                                                'Accept': 'application/json',
                                                'Content-Type': 'application/json',
                                            }
                                        }).then(response => {
                                            let select = `<select class="form-control selectpicker actionsSystem" id="system-action-${parte.IdSistema}" data-live-search="true">`;
                                            response.data.map((action, index) => {
                                                let option = `<option data-tokens=${action.IdAccion} value=${action.IdAccion}> ${action.Descripcion} </option>`;
                                                select = select + option;
                                            })
                                            select = select + (`</select>`);
                                            $(`#container-action-${parte.IdSistema}`).append(select)
                                            $(`#system-action-${parte.IdSistema}`).selectpicker('refresh');
                                        })
                                    }
                                }
                                children[index] = true;
                            }
                            else if (check === 0 || check === 2) {
                                children[index] = false;
                            }
                            if (children.every(element => element == false)) {
                                $(`#observation-${parte.IdSistema}`).empty();
                            }
                        });
                    });
                })
                .catch(error => {
                    console.log(error);
                });
            })
            .catch(error => {
                console.log(error);
            });
        });
        
        //Inicializar Sede - disabled
        $('#headquarters').on('loaded.bs.select', (e) => {
            axios.get(`${URL}/PDMSucursal/Index`, {
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }
            })
            .then(response => {
                response.data.map((item, index) => {
                    let option;
                    if (IdSucursalDefault === item.IdSucursal) {
                        option = `<option data-tokens=${item.IdSucursal} value=${item.IdSucursal} selected> ${item.Descripcion} </option>`;
                    }
                    else {
                        option = `<option data-tokens=${item.IdSucursal} value=${item.IdSucursal}> ${item.Descripcion} </option>`;
                    }

                    $("#headquarters").append(option)
                    $("#headquarters").selectpicker('refresh');
                    //$("#headquarters").removeAttr("disabled");
                });

                let data = {
                    IdImplemento: IdImplementoDefault,
                    IdSucursal: IdSucursalDefault,
                    IdMaquinaria: IdMaquinariaDefault,
                }
                return data;
                })
                .then(data => {
                let dataImpl = JSON.stringify({
                    IdSucursal: data.IdSucursal,
                    Estado: 1
                })
                //Implement for headquarters
                axios.get(`${URL}/PDMImplemento/Index`, {
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                    },
                    params: {
                        IdSucursal: JSON.parse(dataImpl).IdSucursal,
                        Estado: JSON.parse(dataImpl).Estado
                    }
                })
                .then(response => {
                    $(`#implement`).empty();
                    if (response.data.length > 0) {
                        response.data.map((item, index) => {
                            let option;
                            if (data.IdImplemento === item.IdConsumidor) {

                                option = `<option data-tokens=${item.IdConsumidor} value= ${item.IdConsumidor} selected> ${item.Descripcion}</option>`;
                            }
                            else {
                                option = `<option data-tokens=${item.IdConsumidor} value= ${item.IdConsumidor}> ${item.Descripcion}</option>`;
                            }
                            $("#implement").selectpicker('refresh');
                            $("#implement").append(option)
                            //$("#implement").removeAttr("disabled");
                        });
                    }
                    else {
                        $("#implement").prop('disabled', true);
                        $(`#implement`).selectpicker('refresh');
                    }

                })
                .catch(error => {
                    console.log(error);
                });
                //Machinery for headquarters
                axios.get(`${URL}/PDMMaquinaria/Index`, {
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                    },
                    params: {
                        IdSucursal: JSON.parse(dataImpl).IdSucursal,
                        Estado: JSON.parse(dataImpl).Estado
                    }
                })
                .then(response => {
                    $(`#machinery`).empty();
                    if (response.data.length > 0) {
                        response.data.map((item, index) => {
                            let option;
                            if (data.IdMaquinaria === item.IdConsumidor) {
                                option = `<option data-tokens=${item.IdConsumidor} value= ${item.IdConsumidor} selected> ${item.Descripcion}</option>`;
                            } else {
                                option = `<option data-tokens=${item.IdConsumidor} value= ${item.IdConsumidor}> ${item.Descripcion}</option>`;
                            }
                            $(`#machinery`).selectpicker('refresh');
                            $(`#machinery`).append(option)
                            //$(`#machinery`).removeAttr("disabled");
                        });
                    }
                    else {
                        $(`#machinery`).prop('disabled', true);
                        $(`#machinery`).selectpicker('refresh');
                    }

                })
                .catch(error => {
                    console.log(error);
                });

                //Consumer for headquarters
                axios.get(`${URL}/PDMConsumidor/Index`, {
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                    },
                    params: {
                        IdSucursal: JSON.parse(dataImpl).IdSucursal,
                        Estado: JSON.parse(dataImpl).Estado
                    }
                })
                .then(response => {
                    $(`#consumer`).empty();
                    if (response.data.length > 0) {
                        response.data.map((item, index) => {
                            let option;
                            option = `<option data-tokens=${item.IdConsumidor} value= ${item.IdConsumidor}> ${item.Descripcion}</option>`;
                            $(`#consumer`).selectpicker('refresh');
                            $(`#consumer`).append(option)
                            $(`#consumer`).removeAttr("disabled");
                        });
                    }
                    else {
                        $(`#consumer`).prop('disabled', true);
                        $(`#consumer`).selectpicker('refresh');
                    }

                })
                .catch(error => {
                    console.log(error);
                });

            })
            .catch(error => {
                console.log(error);
            });
        });
        
        //Change -> Activity
        $('#activity').on('changed.bs.select	', (e) => {
            const IdActividad = e.currentTarget.value ? e.currentTarget.value : "002";
            let dataActividad = JSON.stringify({
                IdActividad: IdActividad,
            })
            //Work for Activity
            axios.get(`${URL}/PDMLabor/Index`, {
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                },
                params: {
                    IdActividad: JSON.parse(dataActividad).IdActividad,
                }
            })
            .then(response => {    
                $(`#work`).empty();
                if (response.data.length > 0) {
                    response.data.map((item, index) => {
                        $("#work").selectpicker('refresh');
                        let option = `<option data-tokens=${item.IdLabor} value= ${item.IdLabor}> ${item.Descripcion}</option>`;
                        $("#work").append(option)
                        $("#work").removeAttr("disabled");
                    });
                }
                else {
                    $("#work").prop('disabled', true);
                    $(`#work`).selectpicker('refresh');
                }
                    
            })
            .catch(error => {
                console.log(error);
            });
        })
        //Change -> Sede
        $('#headquarters').on('changed.bs.select	', (e) => {
            const id = e.currentTarget.value ? e.currentTarget.value : "002";
            let dataImpl = JSON.stringify({
                id: id,
                estado: 1
            })
            //Implement for headquarters
            axios.get(`${URL}/PDMImplemento/`, {
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                },
                params: {
                    IdSucursal: JSON.parse(dataImpl).id,
                    Estado: JSON.parse(dataImpl).estado
                }
            })
            .then(response => {
                $(`#implement`).empty();
                if (response.data.length > 0) {
                    response.data.map((item, index) => {
                        $("#implement").selectpicker('refresh');
                        let option = `<option data-tokens=${item.IdConsumidor} value= ${item.IdConsumidor}> ${item.Descripcion}</option>`;
                        $("#implement").append(option)
                        $("#implement").removeAttr("disabled");
                    });
                }
                else {
                    $("#implement").prop('disabled', true);
                    $(`#implement`).selectpicker('refresh');
                }

            })
            .catch(error => {
                console.log(error);
            });

            //Machinery for headquarters
            axios.get(`${URL}/PDMMaquinaria/`, {
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                },
                params: {
                    IdSucursal: JSON.parse(dataImpl).id,
                    Estado: JSON.parse(dataImpl).estado
                }
            })
            .then(response => {
                $(`#machinery`).empty();
                if (response.data.length > 0) {
                    response.data.map((item, index) => {
                        $(`#machinery`).selectpicker('refresh');
                        let option = `<option data-tokens=${item.IdConsumidor} value= ${item.IdConsumidor}> ${item.Descripcion}</option>`;
                        $(`#machinery`).append(option)
                        $(`#machinery`).removeAttr("disabled");
                    });
                }
                else {
                    $(`#machinery`).prop('disabled', true);
                    $(`#machinery`).selectpicker('refresh');
                }

            })
            .catch(error => {
                console.log(error);
            }); 

            //Consumer for headquarters
            axios.get(`${URL}/PDMConsumidor/`, {
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                },
                params: {
                    IdSucursal: JSON.parse(dataImpl).id,
                    Estado: JSON.parse(dataImpl).estado
                }
            })
            .then(response => {
                $(`#consumer`).empty();
                if (response.data.length > 0) {
                    response.data.map((item, index) => {
                        $(`#consumer`).selectpicker('refresh');
                        let option = `<option data-tokens=${item.IdConsumidor} value= ${item.IdConsumidor}> ${item.Descripcion}</option>`;
                        $(`#consumer`).append(option)
                        $(`#consumer`).removeAttr("disabled");
                    });
                }
                else {
                    $(`#consumer`).prop('disabled', true);
                    $(`#consumer`).selectpicker('refresh');
                }

            })
            .catch(error => {
                console.log(error);
            });

        });

        //Change -> Type Implement
        $('#implementType').on('changed.bs.select	', (e) => {
            const id = e.currentTarget.value ? e.currentTarget.value : "002";
            let dataImpl = JSON.stringify({
                IdParte: 0,
                IdTipoImplemento: id
            })
            axios.get(`${URL}/PDMCheckListImplemento/Index`, {
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                },
                params: {
                    IdParte: JSON.parse(dataImpl).IdParte,
                    IdTipoImplemento: JSON.parse(dataImpl).IdTipoImplemento
                }
            })
            .then(response => {
                let implemento = response.data[0];
                $(`#table-implement`).empty();
                let table =
                    `
                <table class="table table-hover" id="system-${implemento.IdSistema}" >
                    <thead class="thead-light text-white" id="systems-head">
                        <tr class="d-flex" id="systems-head-th">
                            <th class="col-1 text-center font-weight-bold">#</th>
                            <th class="col-5 text-left font-weight-bold">
                                ${implemento.Sistema}
                            </th>
                            <th class="col-2 text-center font-weight-bold">OK</th>
                            <th class="col-2 text-center font-weight-bold">NO OK</th>
                            <th class="col-2 text-center font-weight-bold">N.A.</th>
                        </tr>
                    </thead>
                </table>`;
                $("#table-implement").append(table);
                //Observation
                $("#table-implement").append(`<div class="table  d-flex justify-content-between" id="observation-${implemento.IdSistema}"/>`);
                return response;
            })
            .then(response => {
                let implemento = response.data[0];
                var indice = 1;
                var tbody = "<tbody>";
                response.data.map((item, index) => {
                    let tr = `
                        <tr class="d-flex components" id="component-${item.IdComponente}">
                            <td class="col-1 text-center">${indice}</td>
                            <td class="col-5 text-left">${item.Componente}</td>
                            <td class="col-2 text-center"><input type="radio" class="text-center" value=0 name=${item.IdComponente}></td>
                            <td class="col-2 text-center"><input type="radio" class="text-center" value=1 name=${item.IdComponente} ></td>
                            <td class="col-2 text-center"><input type="radio" class="text-center" value=2 name=${item.IdComponente} ></td>
                        </tr>
                    `;
                    tbody = tbody + tr;
                    indice = indice + 1;
                })
                tbody = tbody + "</tbody>"
                $(`#system-${implemento.IdSistema}`).append(tbody);
                return response;
            })
            .then(response => {
                let children = [];
                response.data.map((parte, index) => {
                    $(`input[name=${parte.IdComponente}]`).change(() => {
                        var check = $(`input[name=${parte.IdComponente}]:checked`).val();
                        if (check == 1) {
                            let length = $(`#observation-${parte.IdSistema}`).children().length;
                            if (length == 0) {
                                let observation =
                                    `
                                        <div class=" col-md-8">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <label for="observation-system-${parte.IdSistema}">Observaciones:</label>
                                            </div>
                                            <textarea class="form-control observations" rows="1" id="observation-system-${parte.IdSistema}"></textarea>
                                        </div>
                                        <div class="col-md-4" id="container-action-${parte.IdSistema}">
                                            <label for="system-action-${parte.IdSistema}">Acciones</label>

                                        </div>
                                    `;
                                $(`#observation-${parte.IdSistema}`).append(observation);
                                let select;
                                if ($(`#action-${parte.IdSistema}`).children() > 0) {

                                }
                                else {
                                    axios.get(`${URL}/PDMAccion/Index`, {
                                        headers: {
                                            'Accept': 'application/json',
                                            'Content-Type': 'application/json',
                                        }
                                    }).then(response => {
                                        //Get data localstorage
                                    
                                        let select = `<select class="form-control selectpicker actionsSystem" id="system-action-${parte.IdSistema}" data-live-search="true">`;

                                        response.data.map((item, index) => {
                                            let option = `<option data-tokens=${item.IdAccion} value=${item.IdAccion}> ${item.Descripcion} </option>`;
                                            select = select + option;
                                        })
                                        select = select + (`</select>`);
                                        $(`#container-action-${parte.IdSistema}`).append(select)
                                        $(`#system-action-${parte.IdSistema}`).selectpicker('refresh');
                                    })
                                }
                            }
                            children[index] = true;
                        }
                        else if (check == 0 || check == 2) {
                            children[index] = false;
                        }
                        if (children.every(element => element == false)) {
                            $(`#observation-${parte.IdSistema}`).empty();
                        }
                    });
                });
                return response;
            })
            .catch(error => {
                console.log(error);
            });
        });

        //GET -> Controller:Sistema/IndexJSON
        //Inicializar Sistema
        axios.get(`${URL}/PDMSistema/IndexJSON`, {
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            }
        })
        .then(response => {
            response.data.map((item, index) => {
                let table =
                    `
                    <table class="table table-hover systems" id="system-${item.IdSistema}" >
                        <thead class="thead-light text-white" id="systems-head">
                            <tr class="d-flex" id="systems-head-th">
                                <th class="col-1 text-center font-weight-bold">#</th>
                                <th class="col-5 text-left font-weight-bold">
                                    ${item.Descripcion}
                                </th>
                                <th class="col-2 text-center font-weight-bold">OK</th>
                                <th class="col-2 text-center font-weight-bold">NO OK</th>
                                <th class="col-2 text-center font-weight-bold">N.A.</th>
                            </tr>
                        </thead>
                    </table>`;
                $("#table-system").append(table);
                //Observation
                $("#table-system").append(`<div class="table  d-flex justify-content-between" id="observation-${item.IdSistema}"/>`);
            });
            return response;
        })
        .then((response) => {
            let dataParte = JSON.stringify({
                IdParte: IdParteDefault
            });
            //Add Components -> System
            response.data.map((sistema, index) => {
                axios.get(`${URL}/PDMCheckListSistema/Index`, {
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                    },
                    params: {
                        IdParte: JSON.parse(dataParte).IdParte,
                    }
                })
                .then(response => {
                    var indice = 1;
                    var tbody = "<tbody>";
                    response.data.map((parte, index) => {
                        if (sistema.IdSistema === parte.IdSistema) {
                            //Add Componente -> Table Sistema

                            let results = checkListSistemaDefault.filter((item) => { return item.IdComponente == parte.IdComponente; });
                            let tr;
                            if (results[0].Situacion == 0) {
                                tr = `
                                    <tr class="d-flex components" id="component-${parte.IdComponente}">
                                        <td class="col-1 text-center">${indice}</td>
                                        <td class="col-5 text-left">${parte.Componente}</td>
                                        <td class="col-2 text-center"><input type="radio" class="text-center" checked required value=0 name=${parte.IdComponente} disabled></td>
                                        <td class="col-2 text-center"><input type="radio" class="text-center" value=1 name=${parte.IdComponente} disabled></td>
                                        <td class="col-2 text-center"><input type="radio" class="text-center" value=2 name=${parte.IdComponente} disabled></td>
                                    </tr>
                                    `;
                            }
                            else if (results[0].Situacion == 1) {
                                tr = `
                                    <tr class="d-flex components" id="component-${parte.IdComponente}">
                                        <td class="col-1 text-center">${indice}</td>
                                        <td class="col-5 text-left">${parte.Componente}</td>
                                        <td class="col-2 text-center"><input type="radio" class="text-center" value=0 name=${parte.IdComponente}></td>
                                        <td class="col-2 text-center"><input type="radio" class="text-center" checked value=1 name=${parte.IdComponente} ></td>
                                        <td class="col-2 text-center"><input type="radio" class="text-center" value=2 name=${parte.IdComponente} ></td>
                                    </tr>
                                    `;
                            }
                            else if (results[0].Situacion == 2) {
                                tr = `
                                    <tr class="d-flex components" id="component-${parte.IdComponente}">
                                        <td class="col-1 text-center">${indice}</td>
                                        <td class="col-5 text-left">${parte.Componente}</td>
                                        <td class="col-2 text-center"><input type="radio" class="text-center" value=0 name=${parte.IdComponente}></td>
                                        <td class="col-2 text-center"><input type="radio" class="text-center" value=1 name=${parte.IdComponente} ></td>
                                        <td class="col-2 text-center"><input type="radio" class="text-center"checked value=2 name=${parte.IdComponente} ></td>
                                    </tr>
                                    `;
                            }
                            tbody = tbody + tr;
                            indice = indice + 1;
                        }
                    });
                    tbody = tbody + "</tbody>"
                    $(`#system-${sistema.IdSistema}`).append(tbody);
                    return response;
                })
                .then(response => {
                    var children = [];
                    response.data.map((parte, index) => {
                        if (sistema.IdSistema === parte.IdSistema) {
                                //To Verify observations
                            if (observacionesDefault.length > 0) {
                                observacionesDefault.map((obser) => {
                                    if (obser.IdSistema === sistema.IdSistema) {
                                        var check = parseInt($(`input[name=${parte.IdComponente}]:checked`).val());
                                        if (check === 1) {
                                            let length = $(`#observation-${parte.IdSistema}`).children().length;
                                            if (length === 0) {
                                                //TextArea Observaciones - Aplica - Acciones
                                                let observation =
                                                    `
                                                    <div class=" col-md-8">
                                                        <div class="d-flex justify-content-between align-items-center">
                                                            <label for="observation-system-${obser.IdSistema}">Observaciones:</label>
                                                        </div>
                                                        <textarea class="form-control observations" rows="1" id="observation-system-${obser.IdSistema}" required disabled>${obser.Observacion}</textarea>
                                                    </div>
                                                    <div class="col-md-4" id="container-action-${obser.IdSistema}">
                                                        <label for="system-action-${obser.IdSistema}">Acciones</label>

                                                    </div>
                                                `;
                                                $(`#observation-${obser.IdSistema}`).append(observation);

                                                let select;
                                                axios.get(`${URL}/PDMAccion/Index`, {
                                                    headers: {
                                                        'Accept': 'application/json',
                                                        'Content-Type': 'application/json',
                                                    }
                                                }).then(response => {
                                                    //Get data localstorage
                                                    let select;
                                                    if (mitigate === true) {
                                                        select = `<select class="form-control selectpicker actionsSystem" id="system-action-${obser.IdSistema}" data-live-search="true" >`;
                                                    }
                                                    else {
                                                        select = `<select class="form-control selectpicker actionsSystem" id="system-action-${obser.IdSistema}" data-live-search="true" disabled>`;
                                                    }
                                                                                     
                                                    
                                                    response.data.map((action, index) => {

                                                        let option;
                                                        if (obser.IdAccion === action.IdAccion) {
                                                            option = `<option data-tokens=${action.IdAccion} value=${action.IdAccion} selected> ${action.Descripcion} </option>`;
                                                        }
                                                        else {
                                                            option = `<option data-tokens=${action.IdAccion} value=${action.IdAccion}> ${action.Descripcion} </option>`;
                                                        }

                                                        select = select + option;
                                                    })
                                                    select = select + (`</select>`);
                                                    $(`#container-action-${obser.IdSistema}`).append(select)
                                                    $(`#system-action-${obser.IdSistema}`).selectpicker('refresh');
                                                })
                                                children[index] = true;
                                            }
                                        }
                                        else if (check == 0 || check == 2) {
                                            children[index] = false;
                                        }
                                    }
                                })
                            }


                            $(`input[name=${parte.IdComponente}]`).change(() => {
                                var check = parseInt($(`input[name=${parte.IdComponente}]:checked`).val());
                                if (check === 1) {
                                    let length = $(`#observation-${parte.IdSistema}`).children().length;
                                    if (length === 0) {
                                        //TextArea Observaciones - Aplica - Acciones
                                        let observation =
                                            `
                                            <div class=" col-md-8">
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <label for="observation-system-${parte.IdSistema}">Observaciones:</label>
                                                </div>
                                                <textarea class="form-control observations" rows="1" id="observation-system-${parte.IdSistema}" required></textarea>
                                            </div>
                                            <div class="col-md-4" id="container-action-${parte.IdSistema}">
                                                <label for="system-action-${parte.IdSistema}">Acciones</label>

                                            </div>
                                        `;
                                        $(`#observation-${parte.IdSistema}`).append(observation);

                                        let select;
                                        if ($(`#system-action-${parte.IdSistema}`).children() > 0) {

                                        }
                                        else {
                                            axios.get(`${URL}/PDMAccion/Index`, {
                                                headers: {
                                                    'Accept': 'application/json',
                                                    'Content-Type': 'application/json',
                                                }
                                            }).then(response => {

                                                let select = `<select class="form-control selectpicker actionsSystem" id="system-action-${parte.IdSistema}" data-live-search="true">`;
                                                response.data.map((item, index) => {
                                                    let option = `<option data-tokens=${item.IdAccion} value=${item.IdAccion}> ${item.Descripcion} </option>`;
                                                    select = select + option;
                                                })
                                                select = select + (`</select>`);
                                                $(`#container-action-${parte.IdSistema}`).append(select)
                                                $(`#system-action-${parte.IdSistema}`).selectpicker('refresh');
                                            })
                                        }

                                    }
                                    children[index] = true;
                                }
                                else if (check == 0 || check == 2) {
                                    children[index] = false;
                                }
                                if (children.every(element => element == false)) {
                                    $(`#observation-${parte.IdSistema}`).empty();
                                }

                            });

                        }
                    });
                })
                .catch(error => {
                    console.log(error);
                });
            });
            return response;
        })
        .catch(error => {
            console.log(error);
        });

        //PDM Data
        let dataPDM = JSON.stringify({
            IdParte: IdParteDefault,
        })
            console.log(dataPDM);
        //Get Part Daily Fuels 
        axios.get(`${URL}/PDMCombustible/Index`, {
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            },
            params: {
                IdParte: JSON.parse(dataPDM).IdParte
            }
        })
        .then(response => {
            if (response.data.length > 0) {
                response.data.map((item, index) => {
                    let li = `
                        <li class="form-row" id="fuel-item-${item.IdCombustible}">
                            <div class="form-group col-sm-6 col-md-6 fuel-items-item-fuel">
                                <label for="fuel-${item.IdCombustible}">Combustible-${index+1}</label>
                                <input class="form-control" type="number" step="0.01" min="0.01" name="fuel-${item.IdCombustible}" id="fuel-${item.IdCombustible}" value=${item.Galones} required disabled/>
                                <p class="text-danger" id="error-fuel-${item.IdCombustible}"></p>
                            </div>
                            <div class="form-group col-sm-6 col-md-6 fuel-items-item-horometer">
                                <label for="fuel-horometer-${item.IdCombustible}">Horómetro-${index + 1}</label>
                                <input class="form-control" type="number" step="0.01" min="0.01" name="fuel-horometer-${item.IdCombustible}" id="fuel-horometer-${item.IdCombustible}" value=${item.Horometro} required disabled/>
                                <p class="text-danger" id="error-end-horometer-${item.IdCombustible}"></p>
                            </div>
                        </li>
                    `
                    $(`#fuel-items-save`).append(li);
                })
            }
        })
        .catch(error => {
            console.log(error);
        });

        //Get Part Daily Machenery 
        axios.get(`${URL}/PDMParteDiarioMaquinaria/Index`, {
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            }, 
            params: {
                IdParte: JSON.parse(dataPDM).IdParte
            }
        })
        .then(response => {
            if (response.data.length > 0) {
                $("#pdm-image-list").empty();
                $("#loader-message").empty();
                response.data.map((pdm, index) => {
                    let startHour = formatDateTimeCSharpToJavascript(pdm.HoraInicio, false)
                    startnewHour = startHour.split("T")[1];
                    startnewHour = `${startnewHour.split(":")[0]}:${startnewHour.split(":")[1]}`;

                    let endHour = formatDateTimeCSharpToJavascript(pdm.HoraFin, false)
                    endnewHour = endHour.split("T")[1];
                    endnewHour = `${endnewHour.split(":")[0]}:${endnewHour.split(":")[1]}`;

                    let tr = $(`
                    <tr class="d-flex part-items pdm" id="daily-item-${pdm.IdParteDiario}">
                        <td class="col-1 text-center">${index + 1}</th>
                        <td class="col-2 part-items-consumer text-left" id=${pdm.IdConsumidor}>${pdm.IdConsumidor}</td>
                        <td class="col-2 part-items-star-time text-center" id=${startHour}> ${startnewHour} </td>
                        <td class="col-2 part-items-end-time text-center" id=${endHour}> ${endnewHour} </td>
                        <td class="col-1 part-items-activity text-left" id=${pdm.IdActividad}>${pdm.IdActividad}</td>
                        <td class="col-1 part-items-work text-left" id=${pdm.IdLabor}>${pdm.IdLabor}</td>
                        <td class="col-1 part-items-star-horometer text-center" id=${pdm.HorometroInicio}>${pdm.HorometroInicio}</td>
                        <td class="col-1 part-items-end-horometer text-center" id=${pdm.HorometroFinal}>${pdm.HorometroFinal}</td> 
                        <td class="col-1 part-items-end-edit text-center"> <a href="#" id=${pdm.IdParteDiario}> Editar </a> </td>
                    </tr>
                    `);
                    if (partDaily === true) {
                        //Bind Event
                        tr.children("td").children("a").bind("click", (event) => {
                            event.preventDefault();
                            let IdParte = $(event.target).parent().parent().attr("id").split("-").pop();
                            let data = {
                                IdParte: IdParte,
                                IdConsumidor: $(event.target).parent().parent().children(".part-items-consumer").attr("id"),
                                HoraInicio: $(event.target).parent().parent().children(".part-items-star-time").attr("id"),
                                HoraFin: $(event.target).parent().parent().children(".part-items-end-time").attr("id"),
                                IdActividad: $(event.target).parent().parent().children(".part-items-activity").attr("id"),
                                IdLabor: $(event.target).parent().parent().children(".part-items-work").attr("id"),
                                HorometroInicio: $(event.target).parent().parent().children(".part-items-star-horometer").attr("id"),
                                HorometroFin: $(event.target).parent().parent().children(".part-items-end-horometer").attr("id")
                            }

                            let newHoraInicio = changeDateSimbol(data.HoraInicio.split("T")[0], "-")
                            let newHoraFin = changeDateSimbol(data.HoraFin.split("T")[0], "-")
                            $(`.form-add-item-part-daily`).attr(`name`, `daily-item-${data.IdParte}`);

                            $(`#star-date`).val(newHoraInicio);
                            $(`#end-date`).val(newHoraFin);
                            $(`#star-time`).val(data.HoraInicio.split("T").pop());
                            $(`#end-time`).val(data.HoraFin.split("T").pop());
                            $(`#star-horometer`).val(data.HorometroInicio);
                            $(`#end-horometer`).val(data.HorometroFin);
                            $(`#consumer`).val(data.IdConsumidor);
                            $("#consumer").selectpicker("refresh");
                            $(`#activity`).val(data.IdActividad);
                            $("#activity").selectpicker("refresh");
                            $(event.target).parent().parent().remove();
                            let dataActividad = JSON.stringify({
                                IdActividad: data.IdActividad,
                            })
                            //Work for Activity
                            axios.get(`${URL}/PDMLabor/Index`, {
                                headers: {
                                    'Accept': 'application/json',
                                    'Content-Type': 'application/json',
                                },
                                params: {
                                    IdActividad: JSON.parse(dataActividad).IdActividad,
                                }
                            })
                            .then(response => {
                                $(`#work`).empty();
                                if (response.data.length > 0) {
                                    response.data.map((item, index) => {
                                        $("#work").selectpicker('refresh');
                                        let option;
                                        if (item.IdLabor === data.IdLabor) {
                                            option = `<option data-tokens=${item.IdLabor} value= ${item.IdLabor} selected> ${item.Descripcion}</option>`;
                                        } else {
                                            option = `<option data-tokens=${item.IdLabor} value= ${item.IdLabor}> ${item.Descripcion}</option>`;
                                        }
                                        $("#work").append(option)
                                        $("#work").removeAttr("disabled");
                                    });
                                }
                                else {
                                    $("#work").prop('disabled', true);
                                    $(`#work`).selectpicker('refresh');
                                }
                            })
                            .catch(error => {
                                console.log(error);
                            });
                      
                        });

                    }
                    else {
                        tr.children("td").children("a").bind("click", (event) => {
                            event.preventDefault();
                        })
                    }
                    $(`#table-part-daily-body`).append(tr);
                })
            }
            else {
                $("#pdm-image-list").empty();
                $(`#loader-message`).text("Aun no hay registros.")
            }
        })
        .catch(error => {
            console.log(error);
        });

        //Remove Fuel
        $(`#remove-extra-fuel`).click(event => {
            event.preventDefault();
            $(`#fuel-items>li:last`).remove();
        })

        //Add Fuel
        $(`#extra-fuel`).on("click", (event) => {
            event.preventDefault();
            let fuels = $(`#fuel-items`).children().length;
        
            let fuel = `
                <li class="form-row fuel-items-item" id="fuel-item-${fuels + 1}">
                    <div class="form-group col-sm-6 col-md-6 fuel-items-item-fuel">
                        <label for="fuel-${fuels + 1}">Combustible-${fuels + 1}</label>
                        <input class="form-control" type="number" step="0.01" min="0.01" name="fuel-${fuels + 1}" id="fuel-${fuels + 1}" required value="0.00"/>
                        <p class="text-danger" id="error-fuel-${fuels + 1}"></p>
                    </div>
                    <div class="form-group col-sm-6 col-md-6 fuel-items-item-horometer">
                        <label for="fuel-horometer-${fuels + 1}">Horómetro-${fuels + 1}</label>
                        <input class="form-control" type="number" step="0.01" min="0.01" name="fuel-horometer-${fuels + 1}" id="fuel-horometer-${fuels + 1}" required value="0.00"/>
                        <p class="text-danger" id="error-end-horometer-${fuels + 1}"></p>
                    </div>
                </li>
            `
            $(`#fuel-items`).append(fuel);
        });
            
        //Submit Update CheckList
        $(`#form-list`).submit((event) => {
            event.preventDefault();
            //Headquarters
            if ($(`#headquarters`).val() === '000') {
                $(`#error-headquarters`).text("Debe seleccionar una sucursal-sede-fundo.");
                $.notify({
                    // options
                    message: 'Debe seleccionar una Sucursal-Sede-Fundo.'
                }, {
                        // settings
                        type: 'danger',
                        delay: 100,
                    });
                throw "Select headquarters";
            } else {
                $(`#error-headquarters`).text("");
            }

            //ImplementType
            if ($(`#implementType`).val() === '000') {
                $(`#error-implementType`).text("Debe seleccionar un tipo de implemento.");
                $.notify({
                    // options
                    message: 'Debe seleccionar un tipo de implemento.'
                }, {
                        // settings
                        type: 'danger',
                        delay: 100,
                    });
                throw "Select implementType";
            } else {
                $(`#error-implementType`).text("");
            }

            let observationsData = new Array();
            let checkListData = new Array();
            //Get values - System - Components
            let numbersComponenet = 0;

            $(".components").each(function () {
                let idComponente = this.id.split("-").pop();

                if ($(`input[name=${idComponente}]:checked`).length <= 0) {
                    //Validate error select
                    $(`input[name=${idComponente}]`).parent().parent().css({ color: "red" });
                    numbersComponenet = numbersComponenet + 1;
                    console.log(idComponente, numbersComponenet);
                }
                else {
                    //Validate ok select
                    $(`input[name=${idComponente}]`).parent().parent().css({ color: "black" });
                    let check = $(`input[name=${idComponente}]:checked`).val();
                    let idSystem = $(`input[name=${idComponente}]:checked`).parent().parent().parent().parent().attr("id").split("-").pop();


                    checkListData.push({
                        IdSistema: idSystem,
                        IdComponente: idComponente,
                        Estado: 1,
                        Situacion: check
                    })
                }

            })

            //Get values - System - Components - Notifications
            if (numbersComponenet != 0) {
                $.notify({
                    // options
                    message: `No ha selecionado el diagnostico de ${numbersComponenet} componentes, verificar.`
                }, {
                        // settings
                        type: 'danger',
                        delay: 100,
                    });
                throw "Checked checkList";
            }

            //Get values - Observations - Actions
            $('.observations').each(function () {
                let idSystemObservation = this.id.split("-").pop();
                let valueObservation = this.value;

                $('.actionsSystem').each(function () {
                    let idSystemAction = this.id.split("-").pop();
                    if (idSystemObservation === idSystemAction) {
                        let valueAction = this.value;
                        observationsData.push({
                            IdParte: IdParteDefault,
                            IdSistema: idSystemObservation,
                            IdObservacion: 0,
                            Observacion: valueObservation,
                            IdAccion: valueAction
                        })
                    }
                })
            });
            //Update Observations
            observacionesDefault.map((observacionDefault, index) => {
                observationsData.map((observacion, index) => {
                    if (observacion.IdSistema === observacionDefault.IdSistema) {
                        observacion.IdObservacion = observacionDefault.IdObservacion
                    }
                })
            })

            observationsDefaultData = [{
                IdParte: 0,
                IdSistema: "00",
                IdObservacion: 0,
                Observacion: "-------",
                IdAccion: "00"
            }]
            const obrData = observationsData.length !== 0 ? observationsData : observationsDefaultData;

            //Get Values - Main Head
            let PDM_PARTE_DIARIO = JSON.stringify({
                IdParte: IdParteDefault,
                IdSucursal: $("#headquarters").val(),
                IdMaquinaria: $("#machinery").val(),
                IdImplemento: $("#implement").val(),
                IdTipoImplemento: $("#implementType").val(),
                IdOperario: $("#operator").val() | "010129",
                IdTurno: $("#turn").val(),
                PDM_CHECKLIST: checkListData,
                PDM_OBSERVACION: obrData,
                IdUsuario: user.CodUsuario
            });

            console.log(PDM_PARTE_DIARIO);
            axios.post(`${URL}/PDMParteDiario/Editar`, PDM_PARTE_DIARIO, {
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }
            }).then(response => {
                console.log(response.data)
                $(`#send-check-list`).attr("disabled", true);
                $.notify({
                    // options
                    message: `Exito al Mitigar!`
                },
                {
                    // settings
                    type: 'success',
                    delay: 100,
                });
                $("#form-list")[0].reset();

            }).catch(error => {
                console.log(response)
                $.notify({
                    // options
                    message: `Error al Mitigar!, verificar datos!`
                },
                {
                    // settings
                    type: 'danger',
                    delay: 100,
                });
            })
        });
        //Submit Add Item Daily
        $(`#form-add-item-part-daily`).submit((event) => {
            event.preventDefault();
            //Consumer
            if ($(`#consumer`).val() === '000' || $(`#consumer`).val() === "" || $(`#consumer`).val() === undefined) {
                $(`#error-consumer`).text("Debe seleccionar un consumidor.");
                $.notify({
                    // options
                    message: 'Debe seleccionar un consumidor.'
                }, {
                        // settings
                        type: 'danger',
                        delay: 100,
                    });
                throw "Select consumer";
            } else {
                $(`#error-consumer`).empty();
            }

            let X = $("#star-date").val() + "T" + $("#star-time").val();
            let Y = $("#end-date").val() + "T" + $("#end-time").val();
            console.log(X, Y);

            //Comparation date 
            if ($("#star-date").val() === $("#end-date").val()) {
                if ($("#star-time").val() >= $("#end-time").val())
                {
                    $(`#error-star-datetime`).text("La hora inicial no debe ser mayor o igual a la hora final.");
                    $(`#error-end-datetime`).text("La hora final debe mayor a la hora inicial.");

                    $.notify({
                        // options
                        message: 'Error de Fecha'
                    }, {
                            // settings
                            type: 'danger',
                            delay: 100,
                        });
                    throw "Select time";
                } 
                else {
                    $(`#error-star-datetime`).empty();
                    $(`#error-end-datetime`).empty();
                }
            }
            else if ($("#star-date").val() > $("#end-date").val()){
                 $(`#error-start-datetime`).text("La fecha inicial no debe ser mayor a la fecha final.");
                 $(`#error-end-datetime`).text("La fecha final debe ser mayor a la fecha inicial.");

                 $.notify({
                    // options
                    message: 'Error de Fecha'
                 }, {
                        // settings
                        type: 'danger',
                        delay: 100,
                    });
                 throw "Select date";
            }
            else {
                 $(`#error-star-datetime`).empty();
                 $(`#error-end-datetime`).empty();
            }

            //Activity
            if ($(`#activity`).val() === '000') {
                $(`#error-activity`).text("Debe seleccionar una actividad.");
                $.notify({
                    // options
                    message: 'Debe seleccionar una actividad.'
                }, {
                        // settings
                        type: 'danger',
                        delay: 100,
                    });
                throw "Select activity";
            } else {
                $(`#error-activity`).empty();
            }

            //Comparation Horometer 
            if ($(`#star-horometer`).val() >= $(`#end-horometer`).val()) {
                $(`#error-star-horometer`).text("El horométro inicial no debe ser mayor o igual al horométro final.");
                $(`#error-end-horometer`).text("El horométro final debe ser mayor al horométro inicial.");

                $.notify({
                    // options
                    message: 'Error de horométros'
                }, {
                        // settings
                        type: 'danger',
                        delay: 100,
                    });
                throw "Select horometers";
            }
            else {
                $(`#error-star-horometer`).empty();
                $(`#error-end-horometer`).empty();
            }

            //DateTime
            let statDay = `${$("#star-date").val()}T${$("#star-time").val()}`;
            let endDay = `${$("#end-date").val()}T${$("#end-time").val()}`;

            let consumerDescription = $("#consumer option").filter(function () {
                return $.trim($(this).val()) == $(`#consumer`).val()
            }).prop('selected', true).text().trim();

            let activityDescription = $("#activity option").filter(function () {
                return $.trim($(this).val()) == $(`#activity`).val()
            }).prop('selected', true).text().trim();

            let workDescription = $("#work option").filter(function () {
                return $.trim($(this).val()) == $(`#work`).val()
            }).prop('selected', true).text().trim();

            let data = {
                Consumidor: {
                    IdConsumidor: $(`#consumer`).val(),
                    Descripcion: consumerDescription
                },
                HoraInicio: $("#star-time").val(),
                HoraFinal: $("#end-time").val(),
                Actividad: {
                    IdActividad: $(`#activity`).val(),
                    Descripcion: activityDescription,
                },
                Labor: {
                    IdLabor: $(`#work`).val(),
                    Descripcion: workDescription
                },
                HorometroInicio: parseFloat($(`#star-horometer`).val()),
                HorometroFinal: parseFloat($(`#end-horometer`).val()),
            }
            let countItem = $(`#table-part-daily-body`).children().length;

            let getIdForm;

            if ($(`.form-add-item-part-daily`).attr(`name`)) {
                getIdForm = $(`.form-add-item-part-daily`).attr(`name`);
                getIdForm = getIdForm.toString().split("-").pop();
            }
            else {
                getIdForm = 0;
            }
            console.log(getIdForm);
           
            let tr = $(`
                <tr class="d-flex part-items pdm" id="daily-item-${getIdForm}">
                    <td class="col-1 text-center">${countItem + 1}</th>
                    <td class="col-2 part-items-consumer text-left" id=${data.Consumidor.IdConsumidor}>${data.Consumidor.IdConsumidor}</td>
                    <td class="col-2 part-items-star-time text-center" id="${statDay}"> ${data.HoraInicio}</td>
                    <td class="col-2 part-items-end-time text-center" id="${endDay}">${data.HoraFinal}</td>
                    <td class="col-1 part-items-activity text-left" id=${data.Actividad.IdActividad}>${data.Actividad.IdActividad}</td>
                    <td class="col-1 part-items-work text-left" id=${data.Labor.IdLabor}>${data.Labor.IdLabor}</td>
                    <td class="col-1 part-items-star-horometer text-center" id=${data.HorometroInicio}>${data.HorometroInicio}</td>
                    <td class="col-1 part-items-end-horometer text-center" id=${data.HorometroFinal}>${data.HorometroFinal}</td> 
                    <td class="col-1 part-items-end-edit text-center"> <a href="#" id=${data.IdParteDiario}> Editar </a> </td>
                </tr>
                `);
            //Bind Event
            tr.children("td").children("a").bind("click", (event) => {
                event.preventDefault();
                let IdParte = $(event.target).parent().parent().attr("id").split("-").pop();
                let data = {
                    IdParte: IdParte,
                    IdConsumidor: $(event.target).parent().parent().children(".part-items-consumer").attr("id"),
                    HoraInicio: $(event.target).parent().parent().children(".part-items-star-time").attr("id"),
                    HoraFin: $(event.target).parent().parent().children(".part-items-end-time").attr("id"),
                    IdActividad: $(event.target).parent().parent().children(".part-items-activity").attr("id"),
                    IdLabor: $(event.target).parent().parent().children(".part-items-work").attr("id"),
                    HorometroInicio: $(event.target).parent().parent().children(".part-items-star-horometer").attr("id"),
                    HorometroFin: $(event.target).parent().parent().children(".part-items-end-horometer").attr("id")
                }

                let newHoraInicio = changeDateSimbol(data.HoraInicio.split("T")[0], "-")
                let newHoraFin = changeDateSimbol(data.HoraFin.split("T")[0], "-")
                $(`.form-add-item-part-daily`).attr(`name`, `daily-item-${data.IdParte}`);
                $(`#star-date`).val(newHoraInicio);
                $(`#end-date`).val(newHoraFin);
                $(`#star-time`).val(data.HoraInicio.split("T").pop());
                $(`#end-time`).val(data.HoraFin.split("T").pop());
                $(`#star-horometer`).val(data.HorometroInicio);
                $(`#end-horometer`).val(data.HorometroFin);
                $(`#consumer`).val(data.IdConsumidor);
                $("#consumer").selectpicker("refresh");
                $(`#activity`).val(data.IdActividad);
                $("#activity").selectpicker("refresh");
                console.log(data);
                $(event.target).parent().parent().remove();    
                let dataActividad = JSON.stringify({
                    IdActividad: data.IdActividad,
                })
                //Work for Activity
                axios.get(`${URL}/PDMLabor/Index`, {
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                    },
                    params: {
                        IdActividad: JSON.parse(dataActividad).IdActividad,
                    }
                })
                .then(response => {
                    $(`#work`).empty();
                    if (response.data.length > 0) {
                        response.data.map((item, index) => {
                            $("#work").selectpicker('refresh');
                            let option;
                            if (item.IdLabor === data.IdLabor) {
                                option = `<option data-tokens=${item.IdLabor} value= ${item.IdLabor} selected> ${item.Descripcion}</option>`;
                            } else {
                                option = `<option data-tokens=${item.IdLabor} value= ${item.IdLabor}> ${item.Descripcion}</option>`;
                            }
                            $("#work").append(option)
                            $("#work").removeAttr("disabled");
                        });
                    }
                    else {
                        $("#work").prop('disabled', true);
                        $(`#work`).selectpicker('refresh');
                    }
                })
                .catch(error => {
                    console.log(error);
                });
                console.log(data);
            });

            $("#pdm-image-list").empty();
            $(`#table-part-daily-body`).append(tr);
            $(`.form-add-item-part-daily`).removeAttr("name", `daily-item-${getIdForm}`)
            //Refresh Item
            $("#consumer").val('default');
            $("#consumer").selectpicker({ title: "Elige un nuevo consumidor." });
            $("#consumer").selectpicker("refresh");

            $("#activity").selectpicker({ title: "Elige un nueva actividad." });
            $("#activity").val('default');
            $("#activity").selectpicker("refresh");

            $("#work").attr("disabled", true)
            $("#work").selectpicker({ title: "Elige un nueva labor." });
            $("#work").val('default');
            $("#work").selectpicker("refresh");

            $(`#star-time`).val("00:00");
            $(`#end-time`).val("00:00");
            $(`#star-horometer`).val("0.00");
            $(`#end-horometer`).val("0.00");
        })
        //Submit Add Server Daily
        $(`#form-add-daily-part`).submit((event) => {
            event.preventDefault();
            let fuelsitem = $(`#table-part-daily-body`).children().length;
            if (fuelsitem === 0) {
                $.notify({
                    // options
                    message: 'No existe ningun registro.'
                }, {
                        // settings
                        type: 'danger',
                        delay: 100,
                    });
                throw "Select register daily";
            }

            let dailies = new Array();
            $(".part-items").each(function () {
                let IdParteDiario = $(this).attr("id").split("-").pop();
                let partDataDaily = {
                    IdParte: IdParteDiario,
                    IdConsumidor: $(this).children(".part-items-consumer").attr("id"), 
                    IdActividad: $(this).children(".part-items-activity").attr("id"), 
                    IdLabor: $(this).children(".part-items-work").attr("id"),
                    HoraInicio: $(this).children(".part-items-star-time").attr("id"), 
                    HoraFin: $(this).children(".part-items-end-time").attr("id"),
                    HorometroInicio: parseFloat($(this).children(".part-items-star-horometer").text()),
                    HorometroFinal: parseFloat($(this).children(".part-items-end-horometer").text())
                }
                dailies.push(partDataDaily);
            })
            const data = localStorage.getItem("data");
            const userOk = JSON.parse(data);
            let PDM_PARTE_DIARIO_MAQUINARIA = JSON.stringify({
                IdParte: IdParteDefault,
                TablaDiario: dailies,
                IdUsuario: userOk.CodUsuario
            })
            
            axios.post(`${URL}/PDMParteDiarioMaquinaria/Agregar`, PDM_PARTE_DIARIO_MAQUINARIA, {
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }
            })
            .then(response => {
                console.log(response.data);
                $.notify({
                    // options
                    message: 'Exito al guardar Parte Diario Maquinaria.'
                }, {
                    // settings
                    type: 'success',
                    delay: 100,
                });
                axios.get(`${URL}/PDMParteDiarioMaquinaria/Index`, {
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                    },
                    params: {
                        IdParte: JSON.parse(dataPDM).IdParte
                    }
                })
                .then(response => {
                    if (response.data.length > 0) {
                        $("#pdm-image-list").empty();
                        $(`#table-part-daily-body`).empty();
                        response.data.map((pdm, index) => {
                            let startHour = formatDateTimeCSharpToJavascript(pdm.HoraInicio, false)
                            startnewHour = startHour.split("T")[1];
                            startnewHour = `${startnewHour.split(":")[0]}:${startnewHour.split(":")[1]}`;
                            let endHour = formatDateTimeCSharpToJavascript(pdm.HoraFin, false)
                            endnewHour = endHour.split("T")[1];
                            endnewHour = `${endnewHour.split(":")[0]}:${endnewHour.split(":")[1]}`;

                            let tr = $(`
                                <tr class="d-flex part-items pdm" id="daily-item-${pdm.IdParteDiario}">
                                    <td class="col-1 text-center">${index + 1}</th>
                                    <td class="col-2 part-items-consumer text-left" id=${pdm.IdConsumidor}>${pdm.IdConsumidor}</td>
                                    <td class="col-2 part-items-star-time text-center" id=${startHour}> ${startnewHour} </td>
                                    <td class="col-2 part-items-end-time text-center" id=${endHour}> ${endnewHour} </td>
                                    <td class="col-1 part-items-activity text-left" id=${pdm.IdActividad}>${pdm.IdActividad}</td>
                                    <td class="col-1 part-items-work text-left" id=${pdm.IdLabor}>${pdm.IdLabor}</td>
                                    <td class="col-1 part-items-star-horometer text-center" id=${pdm.HorometroInicio}>${pdm.HorometroInicio}</td>
                                    <td class="col-1 part-items-end-horometer text-center" id=${pdm.HorometroFinal}>${pdm.HorometroFinal}</td> 
                                    <td class="col-1 part-items-end-edit text-center"> <a href="#" id=${pdm.IdParteDiario}> Editar </a> </td>
                                </tr>
                                `);
                            //Bind Event
                            tr.children("td").children("a").bind("click", (event) => {
                                event.preventDefault();
                                let IdParte = $(event.target).parent().parent().attr("id").split("-").pop();
                                let data = {
                                    IdParte: IdParte,
                                    IdConsumidor: $(event.target).parent().parent().children(".part-items-consumer").attr("id"),
                                    HoraInicio: $(event.target).parent().parent().children(".part-items-star-time").attr("id"),
                                    HoraFin: $(event.target).parent().parent().children(".part-items-end-time").attr("id"),
                                    IdActividad: $(event.target).parent().parent().children(".part-items-activity").attr("id"),
                                    IdLabor: $(event.target).parent().parent().children(".part-items-work").attr("id"),
                                    HorometroInicio: $(event.target).parent().parent().children(".part-items-star-horometer").attr("id"),
                                    HorometroFin: $(event.target).parent().parent().children(".part-items-end-horometer").attr("id")
                                }

                                let newHoraInicio = changeDateSimbol(data.HoraInicio.split("T")[0], "-")
                                let newHoraFin = changeDateSimbol(data.HoraFin.split("T")[0], "-")
                                $(`.form-add-item-part-daily`).attr(`name`, `daily-item-${data.IdParte}`);

                                $(`#star-date`).val(newHoraInicio);
                                $(`#end-date`).val(newHoraFin);
                                $(`#star-time`).val(data.HoraInicio.split("T").pop());
                                $(`#end-time`).val(data.HoraFin.split("T").pop());
                                $(`#star-horometer`).val(data.HorometroInicio);
                                $(`#end-horometer`).val(data.HorometroFin);
                                $(`#consumer`).val(data.IdConsumidor);
                                $("#consumer").selectpicker("refresh");
                                $(`#activity`).val(data.IdActividad);
                                $("#activity").selectpicker("refresh");
                                $(event.target).parent().parent().remove();
                                let dataActividad = JSON.stringify({
                                    IdActividad: data.IdActividad,
                                })
                                //Work for Activity
                                axios.get(`${URL}/PDMLabor/Index`, {
                                    headers: {
                                        'Accept': 'application/json',
                                        'Content-Type': 'application/json',
                                    },
                                    params: {
                                        IdActividad: JSON.parse(dataActividad).IdActividad,
                                    }
                                })
                                    .then(response => {
                                        $(`#work`).empty();
                                        if (response.data.length > 0) {
                                            response.data.map((item, index) => {
                                                $("#work").selectpicker('refresh');
                                                let option;
                                                if (item.IdLabor === data.IdLabor) {
                                                    option = `<option data-tokens=${item.IdLabor} value= ${item.IdLabor} selected> ${item.Descripcion}</option>`;
                                                } else {
                                                    option = `<option data-tokens=${item.IdLabor} value= ${item.IdLabor}> ${item.Descripcion}</option>`;
                                                }
                                                $("#work").append(option)
                                                $("#work").removeAttr("disabled");
                                            });
                                        }
                                        else {
                                            $("#work").prop('disabled', true);
                                            $(`#work`).selectpicker('refresh');
                                        }
                                    })
                                    .catch(error => {
                                        console.log(error);
                                    });
                                console.log(data);
                            });
                            $(`#table-part-daily-body`).append(tr);

                        })
                    }
                    else {
                        $(`#loader-message`).text("Aun no hay registros.");
                    }
                })
                .catch(error => {
                    console.log(error);
                });
            }).catch(error => {
                console.log(error)
                $.notify({
                    // options
                    message: 'Error al Parte Diario Maquinaria.'
                },{
                    // settings
                    type: 'danger',
                    delay: 100,
                });
            })
        });

        //submit Fueling
        $(`#form-add-fuel-daily-parte`).submit((event) => {
            event.preventDefault();
            let fuelsitem = $(`#fuel-items`).children().length;

            if (fuelsitem === 0) {
                $.notify({
                    // options
                    message: 'No existe abastecimiento.'
                }, {
                        // settings
                        type: 'danger',
                        delay: 100,
                    });
                throw "Select fuels";
            }

            let fuels = new Array();
            $(".fuel-items-item").each(function () {
                let fuel = $(this).children(".fuel-items-item-fuel").children("input").val();
                let horometer = $(this).children(".fuel-items-item-horometer").children("input").val();
                fuels.push({ IdCombustible: 0, Galones: parseFloat(fuel), horometro: parseFloat(horometer) });
            })
           
            let PDM_ABASTECIMIENTO = JSON.stringify({
                IdParte: IdParteDefault,
                IdUsuario: user.CodUsuario, 
                TablaCombustible: fuels 
            })

            axios.post(`${URL}/PDMAbastecimiento/Agregar`, PDM_ABASTECIMIENTO, {
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }
            }).then(response => {
                $.notify({
                    // options
                    message: 'Exito al guardar Abastecmiento.'
                }, {
                        // settings
                        type: 'success',
                        delay: 100,
                    });
                axios.get(`${URL}/PDMCombustible/Index`, {
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                    },
                    params: {
                        IdParte: JSON.parse(dataPDM).IdParte
                    }
                })
                .then(response => {
                    $(`#fuel-items`).empty();
                    $(`#fuel-items-save`).empty();
                    $(`#add-fuel`).focus();
                    if (response.data.length > 0) {
                        response.data.map((item, index) => {
                            let li = `
                                    <li class="form-row" id="fuel-item-${item.IdCombustible}">
                                        <div class="form-group col-sm-6 col-md-6 fuel-items-item-fuel">
                                            <label for="fuel-${item.IdCombustible}">Combustible-${index + 1}</label>
                                            <input class="form-control" type="number" step="0.01" min="0.01" name="fuel-${item.IdCombustible}" id="fuel-${item.IdCombustible}" value=${item.Galones} required disabled/>
                                            <p class="text-danger" id="error-fuel-${item.IdCombustible}"></p>
                                        </div>
                                        <div class="form-group col-sm-6 col-md-6 fuel-items-item-horometer">
                                            <label for="fuel-horometer-${item.IdCombustible}">Horómetro-${index + 1}</label>
                                            <input class="form-control" type="number" step="0.01" min="0.01" name="fuel-horometer-${item.IdCombustible}" id="fuel-horometer-${item.IdCombustible}" value=${item.Horometro} required disabled/>
                                            <p class="text-danger" id="error-end-horometer-${item.IdCombustible}"></p>
                                        </div>
                                    </li>
                                `
                            $(`#fuel-items-save`).append(li);
                        })
                    }
                })
                .catch(error => {
                    console.log(error);
                });
            }).catch(error => {
                console.log(error)
                $.notify({
                    // options
                    message: 'Error al guardar Abastecmiento.'
                }, {
                        // settings
                        type: 'danger',
                        delay: 100,
                });
            })
        })
        }
    })
</script>
}
